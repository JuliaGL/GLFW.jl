using BinaryProvider # requires BinaryProvider 0.3.0 or later
using CMake: cmake
using Libdl: dlext

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS

const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))

#=
Build from source on Linux!
=#
const version = "3.3"
const products = [
    LibraryProduct(prefix, ["libglfw"], :libglfw),
]
# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if Sys.islinux()
    libname = "libglfw"
    tarball_url = "https://github.com/glfw/glfw/archive/$(version).tar.gz"
    hash = "81bf5fde487676a8af55cb317830703086bb534c53968d71936e7b48ee5a0f3e"
    if unsatisfied
        # download to tarball_path
        tarball_path = joinpath(prefix, "downloads", "src.tar.gz")
        download_verify(tarball_url, hash, tarball_path; force=true, verbose=true)

        # unpack into source_path
        tarball_dir = joinpath(prefix, "downloads", dirname(first(list_tarball_files(tarball_path)))) # e.g. "c-blosc-1.14.3"
        source_path = joinpath(prefix, "downloads", "src")
        mkpath(source_path)
        @info("Unpacking $tarball_path into $source_path")
        rm(tarball_dir, force=true, recursive=true)
        rm(source_path, force=true, recursive=true)
        mkpath(dirname(tarball_dir))
        unpack(tarball_path, dirname(tarball_dir); verbose=true)
        tarpath = joinpath(dirname(tarball_dir), "glfw-$(version)")
        mv(tarpath, source_path, force = true)
        build_dir = joinpath(source_path, "build")
        mkdir(build_dir)
        cd(build_dir) do
            opts = ["-DBUILD_SHARED_LIBS=on", "-DGLFW_BUILD_DOCS=Off", "-DGLFW_BUILD_EXAMPLES=off"]
            run(`$cmake $opts ..`)
            run(`$cmake --build .`)
        end
        mkpath(libdir(prefix))
        cp(
            joinpath(build_dir, "src", "libglfw.$dlext"),
            joinpath(libdir(prefix), "libglfw.$dlext"),
            force = true, follow_symlinks = true
        )
    end
else

    # Download binaries from hosted location
    bin_prefix = "https://github.com/SimonDanisch/GLFWBuilder/releases/download/5.0.0"

    # Listing of files generated by BinaryBuilder:
    download_info = Dict(
        Windows(:i686) => ("$bin_prefix/glfw.v3.3.0.i686-w64-mingw32.tar.gz", "262fbc581d392389d8c3a32c69165a28b883af33766cd047f3bf88b1dfbd5b7f"),
        MacOS(:x86_64) => ("$bin_prefix/glfw.v3.3.0.x86_64-apple-darwin14.tar.gz", "93a6a35d93621167788a1560d97a758a564ccecd22f19a1334a47b1db86cec0c"),
        Windows(:x86_64) => ("$bin_prefix/glfw.v3.3.0.x86_64-w64-mingw32.tar.gz", "2efb23819517ec06df6e3bcd023fb157782f33fc57b4080ab64573c1265993e4"),
    )

    dl_info = choose_download(download_info, platform_key_abi())
    if dl_info === nothing && unsatisfied
        # If we don't have a compatible .tar.gz to download, complain.
        # Alternatively, you could attempt to install from a separate provider,
        # build from source or something even more ambitious here.
        error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
    end

    # If we have a download, and we are unsatisfied (or the version we're
    # trying to install is not itself installed) then load it up!
    if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
        # Download and install binaries
        install(dl_info...; prefix=prefix, force=true, verbose=verbose)
    end
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
